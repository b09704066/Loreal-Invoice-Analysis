{"files":[{"id":"8424d1e3-39a3-41ab-84e7-b50d4d7661b8","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Taipei\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"f1606905-b57a-43ef-a2df-c157d24c00f7","name":"README","type":"server_js","source":"//Function explaination\n\n\n// collectMissing(): collect missing category items \u0026 indicies\n\n// saveMissingToDrive(): save missing category items \u0026 indicies to independent JSON files, in order for OpenAI to process item names and app script to impute back in to the correspond cells afterwards\n\n// createJSON(): includes the prompt and setups in JSON files to call OpenAI batch API (batch API is a faster way to call OpenAI for larger requests)\n\n// getBatchOutput(): actually calling the batch API by inserting the JSON files created in createJSON() one by one, due to process limit\n\n// impute(): impute batch output to the original google sheet\n\n// checkOutput(): checking whether OpenAI outputs are within the 55 original categories, due to randomness in the model (could be eliminated with adjusting model parameters ex.temperature)\n\n// clean(): after observing the result, finalize and clean the data to ensure categories are with the original 55 categories\n\n"},{"id":"b6d7926d-5b80-431c-b94c-4d632f4d2dba","name":"collectMissing","type":"server_js","source":"const BATCH_SIZE_3 \u003d 100000;  // Process 100,000 rows per execution due to app script time limit\n\nfunction collectItemsForClassification() {\n  const scriptProperties \u003d PropertiesService.getScriptProperties();\n  const spreadsheet \u003d SpreadsheetApp.openById(\u00271a8OpVAC_2iAj3WVzgIxC66u-eP0QRe2EoFCyU3MOwEU\u0027); //insert sheet ID\n  const sheet \u003d spreadsheet.getSheetByName(\"Invoice_Raw_Hashed\");\n  const lastRow \u003d sheet.getLastRow();\n\n  // Start row: continue from where the script left off, or start at row 2 (since app script has process time limit)\n  let startRow \u003d parseInt(scriptProperties.getProperty(\u0027startRow\u0027) || \u00272\u0027); //get start row from property\n  const endRow \u003d Math.min(startRow + BATCH_SIZE_3 - 1, lastRow);\n  //const endRow \u003d lastRow;\n\n  const itemsToClassify \u003d [];\n  const rowIndices \u003d [];\n\n  const range \u003d sheet.getRange(startRow, 3, endRow - startRow + 1, 2); // Columns C and D\n  const values \u003d range.getValues();\n\n  values.forEach((row, index) \u003d\u003e {\n    if (!row[1]) {  // Check if Category (Column D) is empty\n      itemsToClassify.push(row[0]);  // save Item name (Column C)\n      rowIndices.push(startRow + index);  // save Row index for further imputation after GPT classification\n    }\n  });\n\n  // Save to Google Drive as JSON\n  saveItemsAndIndicesToDrive(itemsToClassify, rowIndices);// save as JSON file to drive \u003e\u003e refer to saveMissingToDrive\n\n  // Update last processed row\n  if (endRow \u003c lastRow) {\n    scriptProperties.setProperty(\u0027startRow\u0027, endRow + 1); \n  } else {\n    // Clear the property and remove any remaining triggers after processing all rows\n    scriptProperties.deleteProperty(\u0027startRow\u0027);\n  }\n}\n\nfunction deleteAllTriggers() {\n  const triggers \u003d ScriptApp.getProjectTriggers();\n  triggers.forEach(trigger \u003d\u003e ScriptApp.deleteTrigger(trigger));\n}\n\n\n\n"},{"id":"b8ba376e-0ba9-4eb9-a09e-faf762cf4346","name":"saveMissingToDrive","type":"server_js","source":"function saveItemsAndIndicesToDrive(items, indices) {\n  const folderId \u003d \u002719HpVScECehX4gAnO_zG1i7AasekorcVr\u0027;  // Replace with your Drive folder ID\n  const folder \u003d DriveApp.getFolderById(folderId);\n  const chunkSize \u003d 10000;  // Number of items per file // OpenAI limit per batch call\n\n  for (let i \u003d 0; i \u003c items.length; i +\u003d chunkSize) { \n    // Create chunked arrays for items and indices\n    const itemsChunk \u003d items.slice(i, i + chunkSize);\n    const indicesChunk \u003d indices.slice(i, i + chunkSize);\n\n    // Create JSON data strings\n    const itemsJson \u003d JSON.stringify(itemsChunk);\n    const indicesJson \u003d JSON.stringify(indicesChunk);\n\n    // Create file names\n    const itemsFileName \u003d `itemsToClassify_chunk_${Math.floor(i / chunkSize) + 1}.json`;\n    const indicesFileName \u003d `rowIndices_chunk_${Math.floor(i / chunkSize) + 1}.json`;\n\n    // Save files to Drive within a try-catch block for error handling\n    try {\n      const itemsFile \u003d folder.createFile(itemsFileName, itemsJson, MimeType.PLAIN_TEXT);\n      const indicesFile \u003d folder.createFile(indicesFileName, indicesJson, MimeType.PLAIN_TEXT);\n\n      Logger.log(`Items file created: ${itemsFile.getUrl()}`);\n      Logger.log(`Indices file created: ${indicesFile.getUrl()}`);\n    } catch (error) {\n      Logger.log(\"Failed to save files to Drive: \" + error.message);\n      // Optionally, implement retry logic here\n    }\n  }\n}\n"},{"id":"875e621e-d81c-4119-ad2e-91ad500f8566","name":"createJSON","type":"server_js","source":"//create JSON file of item names to be classified as OpenAI input\nfunction createJSONLFilesByChunk() {\n  const folderId \u003d \"19HpVScECehX4gAnO_zG1i7AasekorcVr\"; // Replace with your folder ID which you saves the item name files\n  const folder \u003d DriveApp.getFolderById(folderId);\n\n  //list all categories for invoices\n  const categories \u003d [\"折扣‧優惠‧組合\", \"食品\", \"美妝‧保養\", \"親子‧女性\", \"手續費‧服務費‧禮券\",\"麵包‧甜點\", \"衣物‧服飾\", \"日用品‧五金‧雜項\", \"生活日用品\", \"飲料‧飲品\",\"軟體\", \"食材\", \"醫療‧成藥\", \"零食‧餅乾‧巧克力\", \"美髮\", \"咖啡\", \"成人‧情趣\",\n    \"居家\", \"周邊‧零組件\", \"潔牙‧牙齒護理\", \"手機‧通訊\", \"眼鏡\", \"寵物\", \"鞋襪\",\n    \"運動用品\", \"水果‧天然\", \"玩具‧遊戲‧虛擬點數\", \"保健食飲品\", \"電器‧家電\",\n    \"佈置‧裝飾品\", \"文具\", \"其他\", \"包包‧提袋‧旅行箱\", \"影音‧娛樂\", \"清潔\", \"廚房\",\n    \"穿戴\", \"香水‧體香\", \"鐘錶‧穿戴裝置\", \"露營\", \"串流服務\", \"家具\", \"相機‧攝影\",\n    \"健康‧醫療用品\", \"圖書‧雜誌\", \"香菸\", \"醬料‧調味\", \"汽機車\", \"啤酒\", \"園藝‧花卉\",\"動漫‧動畫\", \"課程\", \"洋酒‧料理酒‧藥酒\", \"樂器\", \"交通‧卡票\", \"票券\", \"鎖匙‧鎖具\"];\n\n  for (let i \u003d 1; i \u003c\u003d 15; i++) {\n    const fileName \u003d `itemsToClassify_chunk_${i}.json`;\n    const itemsFileIterator \u003d folder.getFilesByName(fileName);\n    \n    if (itemsFileIterator.hasNext()) {\n      const itemsFile \u003d itemsFileIterator.next();\n      const items \u003d JSON.parse(itemsFile.getBlob().getDataAsString());\n\n      // Create JSONL data for the current chunk\n      const jsonlData \u003d items.map((item, index) \u003d\u003e {\n        return JSON.stringify({\n          custom_id: `request-${i}-${index + 1}`,\n          method: \"POST\",\n          url: \"/v1/chat/completions\",\n          body: {\n            model: \"gpt-3.5-turbo\", //should adjust model parameters, ex.temperature... to minimize randomness\n            messages: [\n              //prompt for classfication\n              { role: \"system\", content: `You are a classifier. Classify each item into only one of the following categories: ${categories.join(\", \")}. If you can\u0027t classify it, return nothing.` },\n              { role: \"user\", content: `Classify this item: ${item}` }\n            ],\n            max_tokens: 50\n          }\n        });\n      }).join(\"\\n\");\n\n      // Save JSONL data to a file named after the chunk\n      const jsonlFile \u003d folder.createFile(`batch_requests_chunk_${i}.jsonl`, jsonlData, MimeType.PLAIN_TEXT);\n      Logger.log(`JSONL file created: ${jsonlFile.getUrl()}`);\n    } else {\n      Logger.log(`File ${fileName} not found in folder ${folder.getName()}.`);\n    }\n  }\n}\n"},{"id":"46c5734b-5b54-4f53-b224-3770e387179a","name":"getBatchOutput","type":"server_js","source":"// const fileContent \u003d getBatchOutput(\"file-l60F16WIvgYbpCh3ckz4qPLJ\"); // Replace with your actual file ID\n// if (fileContent) {\n//   scriptProperties.setProperty(\u0027batch_output\u0027, fileContent);\n//   Logger.log(\"Batch Output: \" + fileContent);\n// }\n\nfunction getBatchOutput(fileId) {\n  const apiUrl \u003d `https://api.openai.com/v1/files/${fileId}/content`;\n  const apiKey \u003d scriptProperties.getProperty(\"OPENAI_API_KEY_DAC\") ; // Replace with your actual API key\n\n  const requestOptions \u003d {\n    method: \"get\",\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n    },\n    muteHttpExceptions: true,\n  };\n\n  try {\n    const response \u003d UrlFetchApp.fetch(apiUrl, requestOptions);\n    const statusCode \u003d response.getResponseCode();\n\n    if (statusCode \u003d\u003d\u003d 200) {\n      const fileContent \u003d response.getContentText();\n      Logger.log(\"File Content Retrieved Successfully:\");\n      Logger.log(fileContent);\n      \n      // Process the fileContent if needed, or return it directly\n      return fileContent;\n    } else {\n      Logger.log(`Failed to retrieve file content. Status Code: ${statusCode}`);\n      Logger.log(response.getContentText());\n      return null;\n    }\n  } catch (error) {\n    Logger.log(`Error occurred while fetching batch output: ${error}`);\n    return null;\n  }\n}\n"},{"id":"bf96338c-8c7f-4649-843a-766c32a6b134","name":"impute","type":"server_js","source":"const unicodeRegex \u003d /\\\\u[0-9A-Fa-f]{4}/;\nconst englishRegex \u003d /^[A-Za-z0-9 .,?!\u0027\";:()-]*$/;\n\nfunction updateSheetWithClassificationsAllChunks(classificationsAllChunks) {\n  const spreadsheet \u003d SpreadsheetApp.openById(\u00271a8OpVAC_2iAj3WVzgIxC66u-eP0QRe2EoFCyU3MOwEU\u0027);\n  const sheet \u003d spreadsheet.getSheetByName(\"Invoice_Raw_Hashed\");\n\n  //for (let chunkNumber \u003d 1; chunkNumber \u003c\u003d 15; chunkNumber++) {\n    // Fetch classifications for this chunk\n    //const classifications \u003d classificationsAllChunks[chunkNumber - 1];\n\n    // Get the corresponding row indices file for this chunk\n    let chunkNumber \u003d 15;\n\n    const folderId \u003d \u002719HpVScECehX4gAnO_zG1i7AasekorcVr\u0027;  // Replace with\n    const folder \u003d DriveApp.getFolderById(folderId);\n    const rowIndicesFile \u003d folder.getFilesByName(`rowIndices_chunk_${chunkNumber}.json`);\n    \n    if (!rowIndicesFile.hasNext()) {\n      Logger.log(`rowIndices_chunk_${chunkNumber}.json not found. Skipping...`);\n      //continue;\n    }\n\n    // Read the row indices\n    const rowIndices \u003d JSON.parse(rowIndicesFile.next().getBlob().getDataAsString()); //get the indicies to impute\n\n    const fileContent \u003d getBatchOutput(\"file-m8yEIhbMuEPdoEZyqX9vvCcw\"); //insert file path each time ex.file1, file2, file3...\n    if (fileContent) {\n      Logger.log(\"Batch Output: \" + fileContent);\n    }\n    fileContentList \u003d fileContent.split(\u0027\\n\u0027);\n    \n    // Loop through classifications and update the appropriate rows in the sheet\n    fileContentList.forEach((fileContentObj, index) \u003d\u003e {\n      const rowIndex \u003d rowIndices[index]; // Get the row index for this classification\n\n      let object \u003d JSON.parse(fileContentObj);\n      category \u003d object.response.body.choices[0].message.content; //retrieve category\n      \n      Logger.log(\"Content:\" + category); //to check category\n      if (englishRegex.test(category)){ //check if chinese character is decoded\n        //category \u003d \"\";\n        category \u003d decodeUnicode(content);\n      } else {\n        category \u003d \"\"\n      }\n     \n      const cell \u003d sheet.getRange(rowIndex, 4);\n      cell.setBackground(\"yellow\"); // Highlight the cell in yellow\n      cell.setValue(category); // Insert the classification result\n    });\n\n    Logger.log(`Updated rows for chunk ${chunkNumber} with ${classifications.length} classifications.`);\n}\n\nfunction decodeUnicode(input) {\n  return decodeURIComponent(JSON.parse(\u0027\"\u0027 + input.replace(/\\\"/g, \u0027\\\\\"\u0027) + \u0027\"\u0027));\n}\n"},{"id":"70ede033-6b3e-42a8-9ab3-406be0847ead","name":"checkOuput","type":"server_js","source":"function myFunction() {\n  // Define the list of substrings to check for\n  const substrings \u003d [\n    \"折扣\", \"優惠\", \"組合\", \"食品\", \"美妝\", \"保養\", \"親子\", \"女性\", \"手續費\", \"服務費\", \"禮券\",\n    \"麵包\", \"甜點\", \"衣物\", \"服飾\", \"日用品\", \"五金\", \"雜項\", \"生活日用品\", \"飲料\", \"飲品\",\n    \"軟體\", \"食材\", \"醫療\", \"成藥\", \"零食\", \"餅乾\", \"巧克力\", \"美髮\", \"咖啡\", \"成人\", \"情趣\",\n    \"居家\", \"周邊\", \"零組件\", \"潔牙\", \"牙齒護理\", \"手機\", \"通訊\", \"眼鏡\", \"寵物\", \"鞋襪\",\n    \"運動用品\", \"水果\", \"天然\", \"玩具\", \"遊戲\", \"虛擬點數\", \"保健食飲品\", \"電器\", \"家電\",\n    \"佈置\", \"裝飾品\", \"文具\", \"其他\", \"包包\", \"提袋\", \"旅行箱\", \"影音\", \"娛樂\", \"清潔\",\n    \"廚房\", \"穿戴\", \"香水\", \"體香\", \"鐘錶\", \"穿戴裝置\", \"露營\", \"串流服務\", \"家具\", \"相機\",\n    \"攝影\", \"健康\", \"醫療用品\", \"圖書\", \"雜誌\", \"香菸\", \"醬料\", \"調味\", \"汽機車\", \"啤酒\",\n    \"園藝\", \"花卉\", \"動漫\", \"動畫\", \"課程\", \"洋酒\", \"料理酒\", \"藥酒\", \"樂器\", \"交通\", \"卡票\",\n    \"票券\", \"鎖匙\", \"鎖具\"\n  ];\n\n  const spreadsheet \u003d SpreadsheetApp.openById(\u00271a8OpVAC_2iAj3WVzgIxC66u-eP0QRe2EoFCyU3MOwEU\u0027);\n  const sheet \u003d spreadsheet.getSheetByName(\"Invoice_Raw_Hashed\");\n  const data \u003d sheet.getDataRange().getValues();\n\n  // Loop through each row in the data\n  for (let row \u003d 1; row \u003c data.length; row++) { //change start of row each time\n    const itemCategory \u003d data[row][3]; // Assuming item_category is in column A\n\n    // Check if itemCategory contains any of the specified substrings\n    if (typeof itemCategory \u003d\u003d\u003d \u0027string\u0027 \u0026\u0026 substrings.some(substring \u003d\u003e itemCategory.includes(substring))) {\n      sheet.getRange(row + 1, 5).setValue(1); // Insert 0 in the right column (column B)\n    }\n    else{\n      sheet.getRange(row + 1, 5).setValue(0);\n    }\n  }\n}\n"},{"id":"cda79ce6-532d-4445-86de-ac84472263c7","name":"clean","type":"server_js","source":"function categorizeItems() {\n  const spreadsheet \u003d SpreadsheetApp.openById(\u00271a8OpVAC_2iAj3WVzgIxC66u-eP0QRe2EoFCyU3MOwEU\u0027);\n  const sheet \u003d spreadsheet.getSheetByName(\"Invoice_Raw_Hashed\");\n  const data \u003d sheet.getDataRange().getValues();\n\n  const cat_list \u003d [\"折扣‧優惠‧組合\", \"食品\", \"美妝‧保養\", \"親子‧女性\", \"手續費‧服務費‧禮券\",\"麵包‧甜點\", \"衣物‧服飾\", \"日用品‧五金‧雜項\", \"生活日用品\", \"飲料‧飲品\",\"軟體\", \"食材\", \"醫療‧成藥\", \"零食‧餅乾‧巧克力\", \"美髮\", \"咖啡\", \"成人‧情趣\",\n    \"居家\", \"周邊‧零組件\", \"潔牙‧牙齒護理\", \"手機‧通訊\", \"眼鏡\", \"寵物\", \"鞋襪\",\n    \"運動用品\", \"水果‧天然\", \"玩具‧遊戲‧虛擬點數\", \"保健食飲品\", \"電器‧家電\",\n    \"佈置‧裝飾品\", \"文具\", \"其他\", \"包包‧提袋‧旅行箱\", \"影音‧娛樂\", \"清潔\", \"廚房\",\n    \"穿戴\", \"香水‧體香\", \"鐘錶‧穿戴裝置\", \"露營\", \"串流服務\", \"家具\", \"相機‧攝影\",\n    \"健康‧醫療用品\", \"圖書‧雜誌\", \"香菸\", \"醬料‧調味\", \"汽機車\", \"啤酒\", \"園藝‧花卉\",\"動漫‧動畫\", \"課程\", \"洋酒‧料理酒‧藥酒\", \"樂器\", \"交通‧卡票\", \"票券\", \"鎖匙‧鎖具\"]\n\n  // Define keywords and corresponding labels\n  const categories \u003d [\n    { keywords: [\"衛生‧護理\", \"衛生‧女性\",\"衛生棉\",\"生理用品\",\"衛生用品\"], label: \"美妝‧保養\" },\n    { keywords: [\"珠寶\", \"飾品\",\"髮式\",\"配件\",\"衣物\",\"服飾\",\"配件\",\"配飾\"], label: \"衣物‧服飾\" },\n    { keywords: [\"鞋襪\"], label: \"鞋襪\" },\n    { keywords: [\"折扣\", \"優惠\", \"組合\"], label: \"折扣‧優惠‧組合\" },\n    { keywords: [\"美妝\", \"保養\"], label: \"美妝‧保養\" },\n     { keywords: [\"親子\", \"女性\"], label: \"親子‧女性\" },\n     { keywords: [\"食品\"], label: \"食品\"},\n     { keywords: [\"手續費\", \"服務費\", \"禮券\"], label: \"手續費‧服務費‧禮券\"},\n     { keywords: [\"衣物\",\"服飾\"], label: \"衣物‧服飾\" },\n     { keywords: [\"日用品\",\"五金\",\"雜項\"], label: \"日用品‧五金‧雜項\" },\n     { keywords: [\"生活日用品\"], label: \"生活日用品\" },\n     { keywords: [\"麵包\",\"甜點\"], label: \"麵包‧甜點\" },\n     { keywords: [\"飲料\",\"飲品\"], label: \"飲料‧飲品\" },\n     { keywords: [\"軟體\"], label: \"軟體\" },\n     { keywords: [\"食材\"], label: \"食材\" },\n     { keywords: [\"醫療\",\"成藥\"], label: \"醫療‧成藥\" },//save\n     { keywords: [\"零食\",\"餅乾\",\"巧克力\"], label: \"零食‧餅乾‧巧克力\" },\n     { keywords: [\"美髮\"], label: \"美髮\" },\n     { keywords: [\"咖啡\"], label: \"咖啡\" },\n     { keywords: [\"成人\",\"情趣\"], label: \"成人‧情趣\" },\n     { keywords: [\"居家\"], label: \"居家\" },\n     { keywords: [\"周邊\",\"零組件\"], label: \"周邊‧零組件\" },\n     { keywords: [\"潔牙\",\"牙齒護理\"], label: \"潔牙‧牙齒護理\" },\n     { keywords: [\"手機\",\"通訊\"], label: \"手機‧通訊\" },//save\n     { keywords: [\"眼鏡\"], label: \"眼鏡\" },\n     { keywords: [\"寵物\"], label: \"寵物\" },\n     { keywords: [\"鞋襪\"], label: \"鞋襪\" },\n     { keywords: [\"運動用品\"], label: \"運動用品\" },\n   { keywords: [\"水果\",\"天然\"], label: \"水果‧天然\" },//save\n     { keywords: [\"玩具\",\"遊戲\",\t\"虛擬點數\"], label: \"玩具‧遊戲‧虛擬點數\" },\n     { keywords: [\"保健食飲品\"], label: \"保健食飲品\" },\n     { keywords: [\"電器\",\"家電\"], label: \"電器‧家電\" },\n     { keywords: [\"佈置\",\"裝飾品\"], label: \"佈置‧裝飾品\" },\n     { keywords: [\"文具\"], label: \"文具\" },\n     { keywords: [\"包包\",\"提袋\",\"旅行箱\"], label: \"包包‧提袋‧旅行箱\" }, //save\n     { keywords: [\"影音\",\"娛樂\"], label: \"影音‧娛樂\" },//save\n     { keywords: [\"清潔\"], label: \"清潔\" },\n     { keywords: [\"廚房\"], label: \"廚房\" },\n     { keywords: [\"穿戴\"], label: \"穿戴\" },\n     { keywords: [\"香水\",\"體香\"], label: \"香水‧體香\" },//save\n     { keywords: [\"鐘錶\", \"穿戴裝置\"], label: \"鐘錶‧穿戴裝置\" },\n     { keywords: [\"露營\"], label: \"露營\" },\n     { keywords: [\"串流服務\"], label: \"串流服務\" },\n     { keywords: [\"家具\"], label: \"家具\" },\n     { keywords: [\"相機\",\"攝影\"], label: \"相機‧攝影\" },\n     { keywords: [\"健康\",\"醫療用品\"], label: \"健康‧醫療用品\" },\n     { keywords: [\"圖書\",\"雜誌\"], label: \"圖書‧雜誌\" },\n     { keywords: [\"香菸\"], label: \"香菸\" },\n     { keywords: [\"醬料\",\"調味\"], label: \"醬料‧調味\" },\n     { keywords: [\"汽機車\"], label: \"汽機車\" },\n     { keywords: [\"啤酒\"], label: \"啤酒\" },\n     { keywords: [\"露營\"], label: \"露營\" },\n     { keywords: [\"園藝\",\"花卉\"], label: \"園藝‧花卉\" },\n     { keywords: [\"動漫\",\"動畫\"], label: \"動漫‧動畫\" },\n     { keywords: [\"洋酒\",\"料理酒\",\"藥酒\"], label: \"洋酒‧料理酒‧藥酒\" },\n     { keywords: [\"樂器\"], label: \"樂器\" },\n     { keywords: [\"交通\",\"卡票\"], label: \"交通‧卡票\" },//save\n     { keywords: [\"票券\"], label: \"票券\" },\n     { keywords: [\"鎖匙\",\"鎖具\"], label: \"鎖匙‧鎖具\" }\n    //Add additional category mappings as needed\n  ];\n\n  // Iterate over rows, starting from row 2 (to skip headers if any)\n  for (let row \u003d 1; row \u003c data.length; row++) { //change start row each iteration\n    const itemCategory \u003d data[row][3]; // Assuming item_category is in column D\n\n    let foundLabel \u003d \"\";\n    \n    // Check if itemCategory contains any of the defined keywords\n    for (const category of categories) {\n      for (const keyword of category.keywords) {\n        if (itemCategory.includes(keyword)) {\n          foundLabel \u003d category.label;\n          break;\n        }\n        else if (cat_list.includes(itemCategory)){\n          foundLabel \u003d itemCategory;\n        }\n        else {\n          foundLabel \u003d \"\"\n        }\n      }\n      if (foundLabel) break;\n    }\n\n    // Insert found label in column F if there was a match\n    if (foundLabel) {\n      cell \u003d sheet.getRange(row + 1, 6);\n      cell.setValue(foundLabel); // Column F is the 6th column\n      cell.setBackground(\"pink\"); \n    }\n  }\n}\n"}]}